#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'active_record'

class ParseDBImport
    include Commander::Methods
  def run
    program :version, '0.0.1'
    program :description, 'Simple app to import parse db'
    default_command :import

    command :import do |c|
      c.syntax = 'parse-db-import import [options]'
      c.summary = ''
      c.description = ''
      c.example 'description', 'command example'
      c.option '--path String', String, 'The location of where the json files exist'
      c.option '--entity String', String, 'The entity to load, all if missing'
      c.option '--dbname String', String, 'db name'
      c.option '--adapter String', String, 'mysql, mysql2, postgresql or sqlite3'
      c.option '--dbuser String', String, 'db user name'
      c.option '--dbpassword String', String, 'db password'
      c.option '--host String', String, 'db password'
      c.action do |args, options|
        options.default({ host: "localhost", adapter: "postgresql", entity: "**" })
        path = options.path
        path = ask("Path? ") unless path
        ActiveRecord::Base.establish_connection({
          adapter: options.adapter,
          host: options.host,
          username: options.dbuser,
          password: options.dbpassword,
          database: options.dbname
        })
        Dir["#{path}/#{options.entity}/data.json"].each do |file|
          missing_columns = {}
          klass = klass_from_file(file)
          puts "Scanning....#{klass.name}"
          process_parse_file(file) do |record|
            columns = get_missing_columns(klass, record.keys)
            unless columns.empty?
              columns.each { |k| missing_columns[k] = 0}
            end
            missing_columns.each do |k, v|
              len = record[k].to_s.length
              missing_columns[k] = len if v < len
            end
          end
          if (missing_columns.length)
            puts "Creating....#{klass.name} columns #{missing_columns.map{|k,v| "#{k} varchar(#{v})"}.join(", ")}"
            create_missing_columns(klass, missing_columns)
          end
        end
        Dir["#{path}/#{options.entity}/data.json"].each do |file|
          klass = klass_from_file(file)
          puts "Importing....#{klass.name}"
          process_parse_file(file) do |record|
            begin
              klass.new(record).save!()
            rescue Exception
              puts record
              raise
            end
          end
        end
      end
    end
    run!
  end

  def get_class(class_name)
    return ParseDBImport.const_get(class_name, false) if ParseDBImport.const_defined?(class_name, false)
    klass = ParseDBImport.const_set(class_name, Class.new(ActiveRecord::Base) do
      @inheritance_column = "ar_type"
    end)
    create_table_if_missing(klass)
    klass
  end

  def create_table_if_missing klass
    dbconnection = klass.connection
    dbconnection = klass.connection
    dbconnection.create_table(klass.table_name) unless dbconnection.table_exists? klass.table_name
  end
  def get_missing_columns(klass, columns)
    @seen_columns ||= {}
    missing_columns = []
    # Get the list of columns that we've already checked.
    seen_columns = @seen_columns[klass.table_name] || []

    # We don't need to check columns that we've already checked.
    columns -= seen_columns
    return columns if columns.empty?


    dbconnection = klass.connection

    #Get a listing of all the columns that don't exist in the entity
    columns.each { |k| missing_columns.push(k) unless dbconnection.column_exists?(klass.table_name, k) }


    #Mark that we've seen all these columns so we don't need to search the database again.
    @seen_columns[klass.table_name] = seen_columns | columns
    missing_columns
  end


  def create_missing_columns(klass, missing_columns)
    return if missing_columns.length == 0

    #Create any columns that are missing.
    dbconnection = klass.connection
    dbconnection.change_table(klass.table_name) do |t|
      missing_columns.each { |k,v| t.column k, :string, { limit: v } }
    end
    klass.reset_column_information
    klass.inheritance_column = "ar_type"
  end

  def map_arrays_to_strings(record)
    record.each { |k, v| record[k] = v.join(', ') if v.is_a? Array }
  end

  def klass_from_file(file)
    class_name = File.basename(File.dirname(file))
    get_class(class_name)
  end

  def process_parse_file(file, &block)
    IO.foreach(file) do |record|
      record = JSON.parse(record)
      record = map_arrays_to_strings(record)
      next if record["delete"]
      yield(record)
    end
  end
end

ParseDBImport.new.run if $0 == __FILE__
